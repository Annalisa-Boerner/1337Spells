<<<<<<< HEAD
sudo service postgresql start

Pass register object into MySpellbook successfully; allow for variation in construction between register and login objects?
=======
Victor
-LastPass popped outside the form bar in Register but not in Login
-Login using signup credentials
-Render text below the input field in a div that's only visible if there's an error message (hidden by default)
-make it actually prevent adding too many spells and cantrips
-close button hovers over the text on spells when details are open
-Adding a spell: save in the DB, then put in a call to the character ID, update the state when there's an API response
    -in addspell logic - instead of returing ok, return all the data so they can be on state
    -same flow with remove button
    -don't change the apis, just change the front end
-MatUI frontend box for react for squishing UI
you can change order in flex direction - it doesnâ€™t have to be in the same order
have the spellbook on top with order 2 on the sections (flex direction followed by property)
-flex-grow: 1 - 2 - 1, for example - this works for expanding on the mobile version- https://css-tricks.com/snippets/css/a-guide-to-flexbox/

Sam 
-skinny text
-can do the same spell or cantrip multiple times
    -check the UI to see if it already exists - same as the search functionality - have the sorry you already have this MUI SNACKBAR 


>>>>>>> main

Loading character in MySpellbook immediately:
-UE with an async function that awaits having the user profile info: write a route to pull directly from the character table rather than passing in via props
-REFERENCE STUDIO DRINK PROFILE


Character Spell connections w api
1. for fetching details: there an index that's shared between the individual spell and the /spells endpoint objects
2. for adding individual spells to spellbook: use the index, so make it not an id in the table, but rather an index
3.  the INDEX IS THE API ENDPOINT 

--back end: adjust seed so that junction tables don't have REFERENCES on the spells table, bc the spells table doesn't include api spells

4. The characters_spells endpoints are currently character_ids, not spell_indices

Add/remove Active class on click
https://www.youtube.com/watch?v=lhLh8N9YN7E&ab_channel=ByteGrad

-example of a nav bar
-create a css class called .active {}
-select all of the nav link elements (class name was nav__link):
    const navLinkEls = document.querySelectorAll('.nav__link');
    -add event listeners
    navLinkEls.forEach(navLinkEl => {
        //in order to have only one active element at a time, remove from any old ones (question mark in case it doesn't exist yet):
        document.querySelector('.active')?.classList.remove('active')

        //now make the new one active
        navLinkEl.addEventListener('click', () => {
            navLinkEl.classList.add('active');
        })
    })




Character Spell names

1. get the character spells listings that match
2. get the spell ids off those listings
3. get the Spells
4. .filter through spells to get the ones that match the character spells then .map to displays

-currently crab has all the spells so I can't see if they're filtered

REFACTOR: write a route that uses a backend join to accomplishes this


//run the getCharacterId when the page navigates from login? because on a refresh it fetches the character
//same for fetching spells



useEffect: gets data from an external source and then gets it ready to render on the app


line 97: creates id
line 119: passes in as props


As far as cantrips and spells go for rendering: now the names appear, but they're not connected to the spells or cantrips tables. they don't reference anything. 
    I wasn't sure how to get the spell_id that's common between the spells and the junction table to connect to the name on the spells table, so I entered them manually. that makes the existence of a spell_id on that table currently kind of useless

    But also when someone is entering a spell, it's more useful to use the name anyway: no one on the front end will have access to an id


I want to drill down into the spellbooks_spells object enough to get spellbook_id off of it, I think


CYPRESS TESTING

-wrap individual components in browserRouter
-import at the top; wrap inside the cy.mount()
-cy.get('h1').should('have.value', 'Login')

--Connecting Token to Front End--
middleware functin: request.setHeader() to create the header on the object for token passing
-create a function above our routing 
(requireToken): it's a middleware function that takes req, res, and next
-if the token is in the req.header, pull it from there: call the user object; set the value of req.user or whatever to be that user's data; call next, pass the request to the middleware function; call the middleware; pass it into the route handler as a callback function, and access it that way; the middleware function runs before the route. the data gets abstracted into the request so that it'll be in the response

RENDERING INDIVIDUAL USER INFO
-access current token
-inside a useEffect:
    async function getSpellbookId
        const response = await getCharacterByUsername(username)
        const result = await response.json();

-I want to pull the spellbook_id ... but one isn't assigned at login? So maybe the char_id becomes the only key that's needed for spellbooks.

New tables:
Chars_spells junction table
Chars_cantrips junction table

Nix:
-arcane recovery
-spellbooks
-spellbooks_spells
-spellbooks_cantrips
